<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:f="/lib/form">
  <st:documentation>
    Generates an input field <tt>&lt;input type="number" ... /></tt> to be used inside &lt;f:entry/>.
    The minimum number is set to 0, the step size to 10.

    <st:attribute name="field" type="java.lang.String">
      Used for databinding. TBD.
    </st:attribute>
    <st:attribute name="name" type="java.lang.String">
      This becomes @name of the &lt;input> tag.
      If @field is specified, this value is inferred from it.
    </st:attribute>
    <st:attribute name="value">
      The initial value of the field. This becomes the @value of the &lt;input> tag.
      If @field is specified, the current property from the "instance" object
      will be set as the initial value automatically,
      which is the recommended approach.
    </st:attribute>
    <st:attribute name="default">
      The default value of the text box, in case both @value is and 'instance[field]' is null.
    </st:attribute>
    <!-- Tomcat doesn't like us using the attribute called 'class' -->
    <st:attribute name="clazz">
      Additional CSS class(es) to add (such as client-side validation clazz="required",
      "number" or "positive-number"; these may be combined, as clazz="required number").
    </st:attribute>
    <st:attribute name="checkMessage">
      Override the default error message when client-side validation fails,
      as with clazz="required", etc.
    </st:attribute>
    <st:attribute name="checkUrl">
      If specified, the value entered in this input field will be checked (via AJAX)
      against this URL, and errors will be rendered under the text field.

      If @field is specified, this will be inferred automatically,
      which is the recommended approach.
    </st:attribute>
  </st:documentation>
  <f:prepareDatabinding/>

  <!-- mostly pass-through all the attributes -->
  <!--
    Do not add 'number' class name by default.
    INPUT.number (defined in hudson-behavior.js) is a class for integers.
    On the other hand, HTML5 <input> permits floating-point numbers.
  -->
  <j:set var="name" value="${attrs.name ?: '_.'+attrs.field}"/>
  <j:set var="default" value="${attrs.default ?: ''}"/>
  <j:set var="value" value="${attrs.value ?: instance[attrs.field] ?: default}"/>
  <j:set var="positiveValue" value="${value > 0? value : null}"/>
  <m:input xmlns:m="jelly:hudson.util.jelly.MorphTagLibrary"
           class="setting-input ${attrs.checkUrl!=null?'validated':''} ${attrs.clazz}"
           name="${name}"
           min="0"
           placeholder="${%Undefined}"
           value="${positiveValue}"
           type="number"
           ATTRIBUTES="${attrs}" EXCEPT="field clazz"/>
  <j:if test="${customizedFields != null and attrs.field != null and value != default}">
    <j:mute>${customizedFields.add(name)}</j:mute>
  </j:if>
</j:jelly>
